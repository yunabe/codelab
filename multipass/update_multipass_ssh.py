#!/usr/bin/env python3

"""
Disclaimer: This code was generated by ChatGPT.
"""

import subprocess
import json
import os
import sys

# Configuration
DEFAULT_USER = "ubuntu"
CONFIG_FILE = os.path.expanduser("~/.ssh/config")
BEGIN_MARKER = "# BEGIN MULTIPASS HOSTS - DO NOT EDIT MANUALLY"
END_MARKER = "# END MULTIPASS HOSTS"

def get_multipass_instances():
    """Runs 'multipass list --format json' and returns a list of (name, ipv4) tuples for running instances."""
    try:
        output = subprocess.check_output(["multipass", "list", "--format", "json"])
    except Exception as e:
        sys.exit(f"Error running multipass list: {e}")
    try:
        data = json.loads(output)
    except json.JSONDecodeError as e:
        sys.exit(f"Error parsing JSON output: {e}")

    hosts = []
    for instance in data.get("list", []):
        if instance.get("state") == "Running":
            name = instance.get("name")
            ipv4_list = instance.get("ipv4", [])
            if ipv4_list:
                ipv4 = ipv4_list[0]
                hosts.append((name, ipv4))
    return hosts

def generate_block(hosts):
    """Generates the SSH config block text for the given hosts."""
    lines = [BEGIN_MARKER]
    for name, ipv4 in hosts:
        lines.append(f"Host {name}")
        lines.append(f"    HostName {ipv4}")
        lines.append(f"    User {DEFAULT_USER}")
    lines.append(END_MARKER)
    return "\n".join(lines) + "\n"

def update_config(new_block):
    """Updates the ~/.ssh/config file, replacing any existing multipass block or appending a new one."""
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as f:
            content = f.read()
    else:
        # Ensure the directory exists if the file does not
        os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True)
        content = ""

    if BEGIN_MARKER in content and END_MARKER in content:
        # Replace the existing block between the markers
        pre = content.split(BEGIN_MARKER)[0].rstrip()
        post = content.split(END_MARKER)[1].lstrip()
        content = pre + "\n" + new_block + "\n" + post
    else:
        # Append the block at the end
        if content and not content.endswith("\n"):
            content += "\n"
        content += new_block

    with open(CONFIG_FILE, "w") as f:
        f.write(content)

def main():
    hosts = get_multipass_instances()
    new_block = generate_block(hosts)
    update_config(new_block)
    print(f"Updated {CONFIG_FILE} with multipass instances.")

if __name__ == "__main__":
    main()
